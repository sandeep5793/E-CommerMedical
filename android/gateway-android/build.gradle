apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {

    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionName libraryVersionName

        consumerProguardFiles 'proguard.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug
        release
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

// define an 'optional' dependency
configurations {
    optional
    implementation.extendsFrom optional
}

ext {
    supportLibraryVersion = '28.0.0'
    gsonVersion = '2.8.2'
    rxJavaVersion = '2.2.5'
    playServicesWalletVersion = '16.0.1'

    jUnitVersion = '4.12'
    robolectricVersion = '4.1'
    mockitoVersion = '2.23.4'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // required
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation "com.google.code.gson:gson:$gsonVersion"

    // optional for rx java
    optional "io.reactivex.rxjava2:rxjava:$rxJavaVersion"

    // optional for google pay
    optional 'androidx.legacy:legacy-support-v4:1.0.0'
    optional "com.google.android.gms:play-services-wallet:$playServicesWalletVersion"

    compileOnly 'androidx.annotation:annotation:1.0.0'

    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}

task androidJavadocs(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    source = android.sourceSets.main.java.srcDirs
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
project.afterEvaluate {


    publishing {
        publications {
            aar(MavenPublication) {
                groupId = 'com.mastercard.gateway'
                artifactId project.name
                version = libraryVersionName

                artifact bundleReleaseAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    def root = asNode()

                    // adds basic info
                    root.appendNode('name', 'Mastercard Payment Gateway Android SDK')
                    root.appendNode('description', 'The Android SDK for Mastercard Payment Gateway')
                    root.appendNode('url', 'https://www.mastercard.com/gateway')

                    // adds license info
                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'Apache License, Version 2.0')
                    license.appendNode('url', 'https://www.apache.org/licenses/LICENSE-2.0.txt')
                    license.appendNode('distribution', 'repo')

                    // adds source control info
                    def scm = root.appendNode('scm')
                    scm.appendNode('url', 'https://github.com/Mastercard/gateway-android-sdk')
                    scm.appendNode('connection', 'https://github.com/Mastercard/gateway-android-sdk.git')

                    // adds dependencies
                    def dependenciesNode = root.appendNode('dependencies')
                    configurations.implementation.allDependencies.each { dp ->
                        if (dp.group) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dp.group)
                            dependencyNode.appendNode('artifactId', dp.name)
                            dependencyNode.appendNode('version', dp.version)

                            if (configurations.optional.allDependencies.contains(dp)) {
                                dependencyNode.appendNode('optional', true)
                            }
                        }
                    }

                    // adds developer info
                    def developers = root.appendNode('developers')
                    def dev = developers.appendNode('developer')
                    dev.appendNode('id', 'simplify-mobile-team')
                    dev.appendNode('name', 'Mastercard Payment Gateway Services')
                    dev.appendNode('email', 'simplify_mobile_team@mastercard.com')
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['aar']
    publish = true
    pkg {
        repo = 'Android'
        name = 'gateway-android-sdk'
        userOrg = 'mpgs'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Mastercard/gateway-android-sdk.git'
        version {
            name = libraryVersionName
        }
    }
}